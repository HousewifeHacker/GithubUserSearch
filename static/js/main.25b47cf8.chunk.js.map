{"version":3,"sources":["components/TopNav.js","components/DetailsModal.js","components/Result.js","components/ResultsContainer.js","serviceWorker.js","index.js","App.js"],"names":["useStyles","makeStyles","theme","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginRight","spacing","marginLeft","width","breakpoints","up","searchIcon","height","pointerEvents","display","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","flexGrow","TopNav","props","classes","delayedSearch","useRef","debounce","value","handleInput","current","AppBar","Toolbar","Typography","variant","noWrap","className","Search","InputBase","placeholder","root","input","onChange","e","target","inputProps","Button","href","modal","border","boxShadow","shadows","margin","avatar","DetailsModal","useState","userInfo","setUserInfo","a","axios","get","api","res","data","console","log","useEffect","fetchData","Paper","align","login","Avatar","src","avatar_url","style","name","location","followers","public_repos","html_url","FinalModal","React","forwardRef","ref","forwardedRef","Result","open","setOpen","Grid","item","xs","sm","md","bigAvatar","onClick","Modal","aria-labelledby","onClose","url","PAGE_LIMIT","ResultsContainer","currentPage","setCurrentPage","results","renderPagination","totalCount","length","maxPage","Math","ceil","showStr","min","max","Container","container","justify","slice","map","key","id","Boolean","window","hostname","match","ReactDOM","render","setResults","searchText","setSearchText","isLoading","setIsLoading","items","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25b47cf8.chunk.js","sourcesContent":["import React, {useRef} from 'react';\nimport {\n  AppBar,\n  Button,\n  InputBase,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport {\n  Search as SearchIcon\n} from '@material-ui/icons';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport debounce from 'lodash.debounce';\n\n// following example in Material UI https://material-ui.com/components/app-bar/\nconst useStyles = makeStyles(theme => ({\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginRight: theme.spacing(2),\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(3),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('md')]: {\n      width: 300,\n    },\n  },\n  flexGrow: {\n    flexGrow: 1,\n  }\n}));\n\n\nexport default function TopNav(props) {\n  const classes = useStyles();\n  const delayedSearch = useRef(\n      debounce(value => props.handleInput(value), 700)\n  ).current;\n  return (\n    <AppBar position=\"static\"> \n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" noWrap>\n          Github User Search\n        </Typography>\n        <div className={classes.search}>\n          <div className={classes.searchIcon}>\n            <SearchIcon />\n          </div>\n          <InputBase\n             placeholder=\"Searchâ€¦\"\n             classes={{\n               root: classes.inputRoot,\n               input: classes.inputInput,\n             }}\n             onChange={e => delayedSearch(e.target.value)}\n             inputProps={{ 'aria-label': 'search' }}\n          />\n        </div>\n        <div className={classes.flexGrow} />\n        <Button\n          variant=\"contained\"\n          href=\"https://github.com/HousewifeHacker/GithubUserSearch\"\n          target=\"_blank\"\n        >\n          View Repo\n        </Button>\n      </Toolbar>\n    </AppBar>\n  )\n};\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n  makeStyles,\n  Avatar,\n  Button,\n  Paper,\n  Typography,\n} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n  modal: {\n    width: 400,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 4),\n    margin: \"auto\",\n  },\n  avatar: {\n    width: 300,\n    height: 300,\n    margin: \"auto\",\n    padding: 20,\n  }\n}));\n\n\nfunction DetailsModal(props) {\n  const classes = useStyles();\n\n  const [userInfo, setUserInfo] = useState(null);\n  // would be used to display error in UI\n  //const [errors, setErrors] = useState(null);\n\n  useEffect(() => {\n    !userInfo && fetchData();\n  });\n\n  async function fetchData() {\n    try {\n      const res = await axios.get(props.api);\n      setUserInfo(res.data);\n    } catch (err) {\n      //setErrors(err);\n      console.log(err);\n    }\n  }\n\n  if (!userInfo) {\n    return (<div>Waiting</div>);\n  }\n\n  return (\n    <Paper className={classes.modal}>\n      <Typography variant=\"h4\" align=\"center\">\n          {userInfo.login}\n      </Typography>\n      <Avatar src={userInfo.avatar_url} className={classes.avatar} />\n      <div style={{padding:20}}>\n        Name: {userInfo.name} <br />\n        Location: {userInfo.location} <br />\n        Followers: {userInfo.followers} <br />\n        Repos: {userInfo.public_repos} <br />\n      </div>\n      <div align=\"center\">\n        <Button\n          href={userInfo.html_url}\n          target=\"_blank\"\n          variant=\"contained\"\n          color=\"primary\">\n            View Profile\n        </Button>\n      </div>\n    </Paper>\n  )\n};\n\nconst FinalModal = React.forwardRef((props, ref) => {\n    return <DetailsModal {...props} forwardedRef={ref} />;\n});\n\n\nexport default FinalModal;\n","import React from 'react';\nimport {\n  Avatar,\n  Button,\n  Grid,\n  Modal,\n  Paper,\n  Typography,\n} from '@material-ui/core';\n\nimport DetailsModal from './DetailsModal';\n\nexport default function Result(props) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  return (\n    <Grid item xs={12} sm={5} md={3}>\n      <Paper align=\"center\" style={{padding:20}}>\n        <Typography variant=\"h5\" align=\"center\">\n          {props.login}\n        </Typography>\n        <Avatar src={props.avatar} className={props.bigAvatar} />\n        <Button onClick={handleOpen} variant=\"contained\">\n          More Info\n        </Button>\n        <Modal\n          aria-labelledby=\"{props.login} details\"\n          open={open}\n          onClose={handleClose}\n        >\n          <DetailsModal api={props.url} />\n        </Modal>\n      </Paper>\n    </Grid>\n  )\n}\n","import React, { useState} from 'react';\nimport {\n  makeStyles,\n  Button,\n  Container,\n  Grid,\n} from '@material-ui/core';\nimport {\n  ArrowBackIos as BackIcon,\n  ArrowForwardIos as ForwardIcon,\n} from '@material-ui/icons';\n\nimport Result from './Result';\n\nconst useStyles = makeStyles({\n  bigAvatar: {\n    margin: \"auto\",\n    width: 140,\n    height: 140,\n    padding: 10,\n  },\n});\n\nconst PAGE_LIMIT = 20;\n\nexport default function ResultsContainer(props) {\n  const classes = useStyles();\n  const [currentPage, setCurrentPage] = useState(0);\n  const {results} = props;\n  const renderItems = () => {\n    let paginatedResults = results.slice(currentPage*PAGE_LIMIT, (currentPage+1)*PAGE_LIMIT);\n    return paginatedResults.map((item) => {\n      return (\n        <Result\n          avatar={item.avatar_url}\n          bigAvatar={classes.bigAvatar}\n          login={item.login}\n          url={item.url}\n          key={item.id} />\n      )\n    });\n  };\n\n  const renderPagination = () => {\n    let totalCount = results.length;\n    let maxPage = Math.ceil(totalCount/PAGE_LIMIT)-1;\n    let showStr = `Showing ${currentPage*PAGE_LIMIT+1} - ${Math.min((currentPage+1)*PAGE_LIMIT, totalCount)} of ${totalCount}`;\n    if (!totalCount) { return }\n    return (\n      <div align=\"right\">\n        {showStr}\n        <Button onClick={() => setCurrentPage(Math.max(0, currentPage-1))}>\n          <BackIcon />\n        </Button>\n        <Button onClick={() => setCurrentPage(Math.min(maxPage, currentPage+1))}>\n          <ForwardIcon />\n        </Button>\n      </div>\n    )\n  };\n  \n  return (\n    <Container style={{padding: 20}}>\n      {renderPagination()}\n      <Grid container justify=\"center\" alignItems=\"center\" spacing={3}>\n        {renderItems()}\n      </Grid>\n      {renderPagination()}\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Fragment, useState } from 'react';\nimport {\n  CssBaseline,\n  Container,\n} from '@material-ui/core';\n\nimport TopNav from './components/TopNav';\nimport ResultsContainer from './components/ResultsContainer';\nimport axios from 'axios';\n\nexport default function App() {\n  const [results, setResults] = useState([]);\n  const [searchText, setSearchText] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function fetchData(searchText) {\n    if (searchText) {\n      setSearchText(searchText);\n      setIsLoading(true);\n      try {\n        const apiBaseURL = \"https://api.github.com/search/users?per_page=100&q=\";\n        const res = await axios.get(`${apiBaseURL}${searchText}`);\n        setResults(res.data.items);\n        setIsLoading(false);\n      } catch(err) {\n        console.log(err);\n        setIsLoading(false);\n      }\n    } else {\n      setResults([]);\n      setIsLoading(false);\n    }\n  }\n\n  const renderBody = () => {\n    if (isLoading) {\n      return <h2>Searching...</h2>\n    } else if (results.length === 0 && searchText) {\n      return <h2>No users found</h2> \n    } else if (results.length === 0) {\n        return <h2> Search for Github Users</h2> \n    } else {\n      return <ResultsContainer results={results} />\n    }\n  }\n\n  return (\n    <Fragment>\n      <CssBaseline />\n      <TopNav handleInput={fetchData} />\n      <Container style={{padding: 10}}>\n        {renderBody()}\n      </Container>\n    </Fragment>\n  );\n};\n\n"],"sourceRoot":""}